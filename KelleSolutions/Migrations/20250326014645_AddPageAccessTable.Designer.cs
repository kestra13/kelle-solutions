// <auto-generated />
using System;
using KelleSolutions.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KelleSolutions.Migrations
{
    [DbContext(typeof(KelleSolutionsDbContext))]
    [Migration("20250326014645_AddPageAccessTable")]
    partial class AddPageAccessTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KelleSolutions.Models.ActionEntity", b =>
                {
                    b.Property<int>("ActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionID"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Due")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Important")
                        .HasColumnType("bit");

                    b.Property<int>("Operator")
                        .HasColumnType("int");

                    b.Property<string>("Relation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Team")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("ActionID");

                    b.ToTable("ActionEntities");
                });

            modelBuilder.Entity("KelleSolutions.Models.Affiliate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Affiliates");
                });

            modelBuilder.Entity("KelleSolutions.Models.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Dashboards");
                });

            modelBuilder.Entity("KelleSolutions.Models.Entity", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<short>("Category")
                        .HasColumnType("smallint");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Comments")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DoNot_Contact")
                        .HasColumnType("bit");

                    b.Property<bool>("DoNot_Market")
                        .HasColumnType("bit");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<short>("Operator")
                        .HasColumnType("smallint");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Postal")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("StateProvince")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("Team")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Visibility")
                        .HasColumnType("tinyint");

                    b.Property<string>("Website")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("Code");

                    b.ToTable("Entities");
                });

            modelBuilder.Entity("KelleSolutions.Models.Lead", b =>
                {
                    b.Property<long>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Code"));

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<int?>("Campaign")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Comments")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DoNotContact")
                        .HasColumnType("bit");

                    b.Property<bool>("DoNotMarket")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("NameFirst")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NameLast")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NameMiddle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<short>("Operator")
                        .HasColumnType("smallint");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("OrganizationTitle")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<short>("Originator")
                        .HasColumnType("smallint");

                    b.Property<decimal>("OriginatorFeeFixed")
                        .HasColumnType("money");

                    b.Property<decimal>("OriginatorFeeRate")
                        .HasColumnType("decimal(9,4)");

                    b.Property<int?>("Person")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Postal")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("StageWorked")
                        .HasColumnType("bit");

                    b.Property<string>("StateProvince")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("Team")
                        .HasColumnType("smallint");

                    b.Property<bool>("TempWarm")
                        .HasColumnType("bit");

                    b.Property<string>("Tracking")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Visibility")
                        .HasColumnType("tinyint");

                    b.HasKey("Code");

                    b.ToTable("Leads");
                });

            modelBuilder.Entity("KelleSolutions.Models.Listing", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<DateTime?>("Accepted")
                        .HasColumnType("datetime2")
                        .HasColumnName("Accepted");

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Closed")
                        .HasColumnType("datetime2")
                        .HasColumnName("Closed");

                    b.Property<string>("Comments")
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("Comments");

                    b.Property<decimal?>("CommissionActual")
                        .HasColumnType("money")
                        .HasColumnName("CommissionActual");

                    b.Property<decimal?>("CommissionFixed")
                        .HasColumnType("money")
                        .HasColumnName("CommissionFixed");

                    b.Property<decimal?>("CommissionRate")
                        .HasColumnType("decimal(6,4)")
                        .HasColumnName("CommissionRate");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("DisplayOnWebsite")
                        .HasColumnType("bit")
                        .HasColumnName("DisplayOnWebsite");

                    b.Property<byte?>("DisplayPriority")
                        .HasColumnType("tinyint")
                        .HasColumnName("DisplayPriority");

                    b.Property<bool?>("ExternalListing")
                        .HasColumnType("bit")
                        .HasColumnName("ExternalListing");

                    b.Property<int>("FK_Property")
                        .HasColumnType("int")
                        .HasColumnName("Property");

                    b.Property<DateTime?>("Listed")
                        .HasColumnType("datetime2")
                        .HasColumnName("Listed");

                    b.Property<string>("MLS_ID")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("MLS_ID");

                    b.Property<string>("MLS_URL")
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("MLS_URL");

                    b.Property<short>("MySource")
                        .HasColumnType("smallint")
                        .HasColumnName("MySource");

                    b.Property<short>("MyStatus")
                        .HasColumnType("smallint")
                        .HasColumnName("MyStatus");

                    b.Property<DateTime?>("OnMarket")
                        .HasColumnType("datetime2")
                        .HasColumnName("OnMarket");

                    b.Property<short>("Operator")
                        .HasColumnType("smallint")
                        .HasColumnName("Operator");

                    b.Property<bool?>("PocketListing")
                        .HasColumnType("bit")
                        .HasColumnName("PocketListing");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money")
                        .HasColumnName("Price");

                    b.Property<decimal?>("PriceActual")
                        .HasColumnType("money")
                        .HasColumnName("Price_Actual");

                    b.Property<short>("Team")
                        .HasColumnType("smallint")
                        .HasColumnName("Team");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Visibility")
                        .HasColumnType("tinyint")
                        .HasColumnName("Visibility");

                    b.HasKey("Code");

                    b.HasIndex("FK_Property");

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("KelleSolutions.Models.PageAccess", b =>
                {
                    b.Property<int>("PageAccessID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PageAccessID"));

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DefaultPermissionGroupID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<short>("Operator")
                        .HasColumnType("smallint");

                    b.Property<string>("PageAccessName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<short>("Team")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Visibility")
                        .HasColumnType("tinyint");

                    b.HasKey("PageAccessID");

                    b.HasIndex("DefaultPermissionGroupID");

                    b.ToTable("PageAccess");
                });

            modelBuilder.Entity("KelleSolutions.Models.Permission", b =>
                {
                    b.Property<int>("PermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionID"));

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsAllowed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ResourceType")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("PermissionID");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("KelleSolutions.Models.PermissionGroup", b =>
                {
                    b.Property<int>("PermissionGroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionGroupID"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("ParentGroupID")
                        .HasColumnType("int");

                    b.Property<int>("PermissionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("PermissionGroupID");

                    b.HasIndex("ParentGroupID");

                    b.HasIndex("PermissionID");

                    b.ToTable("PermissionGroups");
                });

            modelBuilder.Entity("KelleSolutions.Models.Person", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Category")
                        .HasColumnType("smallint");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Comments")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DoNotContact")
                        .HasColumnType("bit");

                    b.Property<bool>("DoNotMarket")
                        .HasColumnType("bit");

                    b.Property<string>("EmailPrimary")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("EmailPrimaryLabel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EmailSecondary")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("EmailSecondaryLabel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Headline")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<short>("MySource")
                        .HasColumnType("smallint")
                        .HasColumnName("MySource");

                    b.Property<string>("NameDisplay")
                        .IsRequired()
                        .HasMaxLength(92)
                        .HasColumnType("nvarchar(92)");

                    b.Property<string>("NameFirst")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NameLast")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NameMiddle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<short>("Operator")
                        .HasColumnType("smallint");

                    b.Property<string>("PhonePrimary")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PhonePrimaryLabel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhoneSecondary")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PhoneSecondaryLabel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Postal")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("StateProvince")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("Team")
                        .HasColumnType("smallint");

                    b.Property<string>("Tracking")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("VIP")
                        .HasColumnType("bit");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.Property<byte>("Visibility")
                        .HasColumnType("tinyint");

                    b.HasKey("Code");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("KelleSolutions.Models.PersonToEntity", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<short>("Creator")
                        .HasColumnType("smallint");

                    b.Property<bool>("Deprecated")
                        .HasColumnType("bit");

                    b.Property<int>("Entity")
                        .HasColumnType("int");

                    b.Property<int>("Person")
                        .HasColumnType("int");

                    b.Property<short>("Relation")
                        .HasColumnType("smallint");

                    b.HasKey("Code");

                    b.HasIndex("Entity");

                    b.HasIndex("Person");

                    b.ToTable("PersonToEntity");
                });

            modelBuilder.Entity("KelleSolutions.Models.PersonToListing", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<int>("ListingId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("ListingId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonToListing");
                });

            modelBuilder.Entity("KelleSolutions.Models.PersonToPerson", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateTime2");

                    b.Property<short>("Creator")
                        .HasColumnType("smallint");

                    b.Property<bool>("Deprecated")
                        .HasColumnType("bit");

                    b.Property<int>("Person2Id")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedId")
                        .HasColumnType("int");

                    b.Property<short>("Relation")
                        .HasColumnType("smallint");

                    b.HasKey("Code");

                    b.HasIndex("Person2Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonToPerson");
                });

            modelBuilder.Entity("KelleSolutions.Models.PersonToProperties", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("DateTime2");

                    b.Property<short>("Creator")
                        .HasColumnType("smallint");

                    b.Property<bool>("Deprecated")
                        .HasColumnType("bit");

                    b.Property<int>("Person")
                        .HasColumnType("int");

                    b.Property<int>("Properties")
                        .HasColumnType("int");

                    b.Property<short>("Relation")
                        .HasColumnType("smallint");

                    b.HasKey("Code");

                    b.HasIndex("Person");

                    b.HasIndex("Properties");

                    b.ToTable("PersonToProperties");
                });

            modelBuilder.Entity("KelleSolutions.Models.Property", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Code");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("APN")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<byte?>("Baths")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("BathsPartial")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Beds")
                        .HasColumnType("tinyint");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Comments")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<short?>("Constructed")
                        .HasColumnType("smallint");

                    b.Property<string>("Country")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("County")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<byte?>("Garages")
                        .HasColumnType("tinyint");

                    b.Property<short>("MyType")
                        .HasColumnType("smallint")
                        .HasColumnName("MyType");

                    b.Property<short>("Operator")
                        .HasColumnType("smallint");

                    b.Property<string>("Postal")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<short?>("Remodeled")
                        .HasColumnType("smallint");

                    b.Property<bool>("Residential")
                        .HasColumnType("bit");

                    b.Property<int?>("SqFt_Building")
                        .HasColumnType("int");

                    b.Property<int?>("SqFt_Land")
                        .HasColumnType("int");

                    b.Property<string>("StateProvince")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Street")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("Team")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Validated")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Visibility")
                        .HasColumnType("tinyint");

                    b.HasKey("Code");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("KelleSolutions.Models.RolePermissionGroupEntity", b =>
                {
                    b.Property<string>("RoleID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PermissionGroupID")
                        .HasColumnType("int");

                    b.Property<int>("PageAccessID")
                        .HasColumnType("int");

                    b.HasKey("RoleID", "PermissionGroupID", "PageAccessID");

                    b.HasIndex("PageAccessID");

                    b.HasIndex("PermissionGroupID");

                    b.ToTable("RolePermissionGroupEntity");
                });

            modelBuilder.Entity("KelleSolutions.Models.SellerIDMapping", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.Property<int>("PropertyID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Code");

                    b.HasIndex("PersonID");

                    b.HasIndex("PropertyID");

                    b.ToTable("SellerIDMappings");
                });

            modelBuilder.Entity("KelleSolutions.Models.StatusMapping", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("StatusCode")
                        .HasColumnType("smallint");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Code");

                    b.ToTable("StatusMappings");
                });

            modelBuilder.Entity("KelleSolutions.Models.Tenant", b =>
                {
                    b.Property<int>("TenantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TenantID"));

                    b.Property<int>("LicenseOperator")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TenantCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("TenantID");

                    b.ToTable("Tenant", (string)null);
                });

            modelBuilder.Entity("KelleSolutions.Models.TenantToPerson", b =>
                {
                    b.Property<int>("TenantID")
                        .HasColumnType("int");

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.Property<string>("AssignedToUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TenantToPersonID")
                        .HasColumnType("int");

                    b.HasKey("TenantID", "PersonID");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("PersonID");

                    b.ToTable("TenantToPeople");
                });

            modelBuilder.Entity("KelleSolutions.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AppraisalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DepositDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LoanDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PropertyInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransitionDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("KelleSolutions.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Affiliation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsTenant")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ResetCodeExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantID")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TenantID");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f7050cd6-1bc0-43fd-9cab-136276b06ec3",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "239329a7-815c-45e0-bb96-28f1ce23a06b",
                            Name = "Broker",
                            NormalizedName = "BROKER"
                        },
                        new
                        {
                            Id = "a2e18dbc-72a2-4120-84b7-f4597b8769f4",
                            Name = "Agent",
                            NormalizedName = "AGENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KelleSolutions.Models.Dashboard", b =>
                {
                    b.HasOne("KelleSolutions.Models.User", "User")
                        .WithOne("Dashboard")
                        .HasForeignKey("KelleSolutions.Models.Dashboard", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KelleSolutions.Models.Listing", b =>
                {
                    b.HasOne("KelleSolutions.Models.Property", "PropertyDetails")
                        .WithMany()
                        .HasForeignKey("FK_Property")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropertyDetails");
                });

            modelBuilder.Entity("KelleSolutions.Models.PageAccess", b =>
                {
                    b.HasOne("KelleSolutions.Models.PermissionGroup", "DefaultPermissionGroup")
                        .WithMany()
                        .HasForeignKey("DefaultPermissionGroupID");

                    b.Navigation("DefaultPermissionGroup");
                });

            modelBuilder.Entity("KelleSolutions.Models.PermissionGroup", b =>
                {
                    b.HasOne("KelleSolutions.Models.PermissionGroup", "ParentGroup")
                        .WithMany("ChildGroups")
                        .HasForeignKey("ParentGroupID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KelleSolutions.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentGroup");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("KelleSolutions.Models.PersonToEntity", b =>
                {
                    b.HasOne("KelleSolutions.Models.Entity", "EntityNavigation")
                        .WithMany()
                        .HasForeignKey("Entity")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KelleSolutions.Models.Person", "PersonNavigation")
                        .WithMany()
                        .HasForeignKey("Person")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EntityNavigation");

                    b.Navigation("PersonNavigation");
                });

            modelBuilder.Entity("KelleSolutions.Models.PersonToListing", b =>
                {
                    b.HasOne("KelleSolutions.Models.Listing", "Listing")
                        .WithMany()
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KelleSolutions.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Listing");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("KelleSolutions.Models.PersonToPerson", b =>
                {
                    b.HasOne("KelleSolutions.Models.Person", "Person2")
                        .WithMany()
                        .HasForeignKey("Person2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KelleSolutions.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Person2");
                });

            modelBuilder.Entity("KelleSolutions.Models.PersonToProperties", b =>
                {
                    b.HasOne("KelleSolutions.Models.Person", "People")
                        .WithMany()
                        .HasForeignKey("Person")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KelleSolutions.Models.Property", "Property")
                        .WithMany()
                        .HasForeignKey("Properties")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("People");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("KelleSolutions.Models.RolePermissionGroupEntity", b =>
                {
                    b.HasOne("KelleSolutions.Models.PageAccess", "PageAccess")
                        .WithMany()
                        .HasForeignKey("PageAccessID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KelleSolutions.Models.PermissionGroup", "PermissionGroupNavigation")
                        .WithMany()
                        .HasForeignKey("PermissionGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "RoleNavigation")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RolePermissionGroupEntity_AspNetRoles_RoleID");

                    b.Navigation("PageAccess");

                    b.Navigation("PermissionGroupNavigation");

                    b.Navigation("RoleNavigation");
                });

            modelBuilder.Entity("KelleSolutions.Models.SellerIDMapping", b =>
                {
                    b.HasOne("KelleSolutions.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KelleSolutions.Models.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("KelleSolutions.Models.TenantToPerson", b =>
                {
                    b.HasOne("KelleSolutions.Models.User", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("AssignedUserId");

                    b.HasOne("KelleSolutions.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_TenantToPeople_Person_PersonID");

                    b.HasOne("KelleSolutions.Models.Tenant", "Tenant")
                        .WithMany("TenantToPeople")
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TenantToPeople_Tenant_TenantID");

                    b.Navigation("AssignedUser");

                    b.Navigation("Person");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("KelleSolutions.Models.User", b =>
                {
                    b.HasOne("KelleSolutions.Models.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KelleSolutions.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KelleSolutions.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KelleSolutions.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KelleSolutions.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KelleSolutions.Models.PermissionGroup", b =>
                {
                    b.Navigation("ChildGroups");
                });

            modelBuilder.Entity("KelleSolutions.Models.Tenant", b =>
                {
                    b.Navigation("TenantToPeople");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("KelleSolutions.Models.User", b =>
                {
                    b.Navigation("Dashboard")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
