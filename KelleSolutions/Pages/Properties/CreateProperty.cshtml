@page
@model KelleSolutions.Pages.Properties.CreatePropertyModel
@{ ViewData["Title"] = "Create New Property"; }
<!--
Date: 02/11/2025 
Reworked CreateProperty.cshtml to reflect the updated Property model.
-->

<head>
    <link rel="stylesheet" href="~/wwwroot/css/CreateProperty.css" asp-append-version="true">
    <h2>Create New Property</h2>
</head>

<body>
    <form method="post">
        <!-- Street input field (Required) -->
        <div class="form-group">
            <label asp-for="Property.Street" class="control-label required">Street</label>
            <input asp-for="Property.Street" id="Street" class="form-control"
                placeholder="Start typing a street address..." autocomplete="off"/>
            <span asp-validation-for="Property.Street" class="text-danger"></span>
        </div>

        <!-- City input field (Required) -->
        <div class="form-group">
            <label asp-for="Property.City" class="control-label required">City</label>
            <input asp-for="Property.City" class="form-control"/>
            <span asp-validation-for="Property.City" class="text-danger"></span>
        </div>

        <!-- StateProvince input field (Required) -->
        <div class="form-group">
            <label asp-for="Property.StateProvince" class="control-label required">State/Province</label>
            <input asp-for="Property.StateProvince" class="form-control"/>
            <span asp-validation-for="Property.StateProvince" class="text-danger"></span>
        </div>

        <!-- Postal Code input field (Required) -->
        <div class="form-group">
            <label asp-for="Property.Postal" class="control-label required">Postal Code</label>
            <input asp-for="Property.Postal" class="form-control" type="text"/>
            <span asp-validation-for="Property.Postal" class="text-danger"></span>
        </div>

        <!-- Building Size input field (Optional) -->
        <div class="form-group">
            <label asp-for="Property.SqFt_Building" class="control-label">Building Size (sq ft)</label>
            <input asp-for="Property.SqFt_Building" class="form-control" type="number" min="0" step="1"
                placeholder="Enter the building size in square feet"/>
            <span asp-validation-for="Property.SqFt_Building" class="text-danger"></span>
        </div>

        <!-- Land Size input field (Optional) -->
        <div class="form-group">
            <label asp-for="Property.SqFt_Land" class="control-label">Land Size</label>
            <div>
                <input type="radio" id="sqftOption" name="landSizeUnit" value="sqft" checked>
                <label for="sqftOption">in Square Feet</label>
                <input type="radio" id="acreOption" name="landSizeUnit" value="acre">
                <label for="acreOption">in Acres</label>
            </div>
            <div class="input-group">
                <input asp-for="Property.SqFt_Land" id="LandSizeInput" class="form-control"
                    type="number" min="0" step="1" placeholder="Enter the land size"/>
                <span class="input-group-text" id="unitLabel">sq ft</span>
            </div>
            <div>
                <strong>Converted Size:</strong> <span id="ConvertedSize">0</span>
                <span id="ConvertedUnit">acres</span>
            </div>
        </div>

        <!-- Bedrooms input field (Required) -->
        <div class="form-group">
            <label asp-for="Property.Beds" class="control-label required">Bedrooms</label>
            <input asp-for="Property.Beds" class="form-control" type="number" min="0" value="0"/>
            <span asp-validation-for="Property.Beds" class="text-danger"></span>
        </div>
        
        <!-- Bathrooms input field (Required) -->
        <div class="form-group">
            <label asp-for="Property.Baths" class="control-label required">Bathrooms</label>
            <input asp-for="Property.Baths" class="form-control" type="number" min="0" value="0"/>
            <span asp-validation-for="Property.Baths" class="text-danger"></span>
        </div>

        <!-- Garages input field (Required) -->
        <div class="form-group">
            <label asp-for="Property.Garages" class="control-label required">Garages</label>
            <input asp-for="Property.Garages" class="form-control" type="number" min="0" value="0"/>
            <span asp-validation-for="Property.Garages" class="text-danger"></span>
        </div>

        <!-- Year Constructed input field (Required) -->
        <div class="form-group">
            <label asp-for="Property.Constructed" class="control-label required">Year Constructed</label>
            <input asp-for="Property.Constructed" class="form-control" type="number" min="1500" 
                max="@DateTime.UtcNow.Year" maxlength="4"/>
            <span asp-validation-for="Property.Constructed" class="text-danger"></span>
        </div>

        <!-- Comments input field (Optional) -->
        <div class="form-group">
            <label asp-for="Property.Comments" class="control-label">Comments</label>
            <textarea asp-for="Property.Comments" id="Comments" class="form-control" rows="4" maxlength="2048"
                placeholder="Enter additional comments here (max 2048 characters)..."></textarea>
            <span asp-validation-for="Property.Comments" class="text-danger"></span>
        </div>

        <!-- Property Type drop-down list (Required) -->
        <div class="form-group">
            <label asp-for="Property.MyType" class="control-label required">Property Type</label>
            <select asp-for="Property.MyType" asp-items="Html.GetEnumSelectList<Models.PropertyTypeEnum>()" class="form-control searchable-dropdown">
                <option value="">Select Property Type</option>
            </select>
            <span asp-validation-for="Property.MyType" class="text-danger"></span>
        </div>

        <!-- Submit and Cancel buttons -->
        <button type="submit" class="btn btn-primary">Create Property</button>
        <a asp-page="/Dashboard" id="cancelButton" class="btn btn-secondary">Cancel</a>
    </form>
</body>

@section Scripts {
    <partial name="_ValidationScriptsPartial"/>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <!-- Include your JavaScript for auto-suggestions, cancel handling, land size conversion, and year validation here -->
}


@section Scripts {
    <!-- ASP.NET has built-in validation scripts that can be imported via this line -->
    <partial name="_ValidationScriptsPartial"/>

    <!-- Loads jQuery from Google CDN -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    
    <!-- Adds auto-suggestions feature, populates a dropdown list with suggested addresses -->
    <script>
        $(document).ready(function () {
            // These are selectors for address input and suggestions list
            var addressInput = $('#Address');
            var suggestionsList = $('#propertySuggestions');

            // Function to fetch and display property suggestions
            function fetchPropertySuggestions(query) {
                // Only fetch suggestions when user types more than 1 character
                if (query.length > 1) {
                    $.ajax({
                        // API endpoint for suggestions
                        url: '/api/PropertiesApi/GetPropertySuggestions',
                        // Send user input as the 'term' parameter
                        data: { term: query },
                        success: function (data) {
                            // Clear previous suggestions
                            suggestionsList.empty();
                            if (data.length === 0) {
                                suggestionsList.append('<li class="list-group-item text-muted">No results found</li>');
                                return;
                            }
                            // Loop through returned data and append each result as a list item
                            data.forEach(function (item) {
                                suggestionsList.append(
                                    `<li class="list-group-item suggestion-item" data-id="${item.id}">
                                        ${item.Address}, ${item.city}, ${item.state}
                                    </li>`
                                );
                            });
                        },
                        error: function () {
                            console.error('Error fetching property suggestions.');
                        }
                    });
                }
                else {
                    // Clear suggestions if input is too short
                    suggestionsList.empty();
                }
            }

            // Event listener: Fetch suggestions when user types in the address input
            addressInput.on('input', function () {
                fetchPropertySuggestions($(this).val());
            });

            // Event listener: Click event to fill input field when a suggestion is selected
            $(document).on('click', '.suggestion-item', function () {
                // Get selected suggestion text
                var selectedAddress = $(this).text();
                // Set it as input value
                addressInput.val(selectedAddress);
                // Clear the suggestions list
                suggestionsList.empty();
            });

            // Event listener: Hide suggestions when user clicks outside the input or suggestions list
            $(document).click(function (e) {
                if (!$(e.target).closest('#Address, #propertySuggestions').length) {
                    // Hide suggestions
                    suggestionsList.empty();
                }
            });
        });
    </script>
    
    <!-- Handles Cancel button and how it behaves -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Get the Cancel button by its ID
            var cancelButton = document.getElementById("cancelButton");

            // This if-statement ensures the button exists before adding an event listener (prevents errors)
            if (cancelButton) {
                cancelButton.addEventListener("click", function (event) {
                    // Calls confirmCancelIfDirty() to check for unsaved changes
                    // If the user has made changes, a confirmation prompt appears
                    // If the user confirms, the page navigates as expected
                    // If the user cancels, the navigation is prevented using event.preventDefault()
                    if (!confirmCancelIfDirty()) {
                        // Stops navigation if user cancels
                        event.preventDefault();
                    }
                });
            }
        });
    </script>

    <!-- Checks if any form input fields have unsaved changes. If changes exist, it prompts the user
        for confirmation before canceling.
        Returns Boolean values:
            True if there are no unsaved changes or user confirms cancel,
            False otherwise.
    -->
    <script>
        function confirmCancelIfDirty() {
            // This line selects all text, number, and textarea fields
            const inputs = document.querySelectorAll('input[type="text"], input[type="number"], input[type="date"], textarea');
            // This line selects all checkboxes
            const checkboxes = document.querySelectorAll('input[type="checkbox"]');
            // Check if any text, number, or textarea field has a non-empty value
            for (let input of inputs) {
                if (input.value.trim() !== "") {
                    return confirm("Are you sure you want to cancel? Unsaved changes will be lost.");
                }
            }
            // Check if any checkbox is checked
            for (let checkbox of checkboxes) {
                if (checkbox.checked) {
                    return confirm("Are you sure you want to cancel? Unsaved changes will be lost.");
                }
            }
            // No unsaved changes, allow canceling without a confirmation prompt
            return true;
        }
    </script>

    <!-- This handles the calculations for Land Size Conversion -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Select input and output elements
            const landSizeInput = document.getElementById("LandSizeInput");
            const convertedSize = document.getElementById("ConvertedSize");
            const convertedUnit = document.getElementById("ConvertedUnit");
            const unitLabel = document.getElementById("unitLabel");
            const sqftOption = document.getElementById("sqftOption");
            const acreOption = document.getElementById("acreOption");

            // Ensures all required elements exist before running the script
            if (!landSizeInput || !convertedSize || !convertedUnit || !unitLabel || !sqftOption || !acreOption) {
                console.warn("Land size conversion script skipped: One or more required elements are missing.");
                // Exits script early to prevent errors
                return;
            }

            // Conversion factor: 1 acre = 43,560 square feet
            const SQFT_PER_ACRE = 43560;

            // Converts the entered land size between square feet and acres
            // Updates the displayed converted value and unit as needed
            function convertSize() {
                let value = parseFloat(landSizeInput.value);
                // Handles invalid input or negative values
                if (isNaN(value) || value < 0) {
                    convertedSize.textContent = "0";
                    convertedUnit.textContent = sqftOption.checked ? "acres" : "sq ft";
                    return;
                }
                // Convers based on the selected units
                if (sqftOption.checked) {
                    convertedSize.textContent = (value / SQFT_PER_ACRE).toFixed(2);
                    convertedUnit.textContent = "acres";
                }
                else {
                    convertedSize.textContent = Math.round(value * SQFT_PER_ACRE);
                    convertedUnit.textContent = "sq ft";
                }
            }

            // Updates the input step size and unit label when the user changes the measurement unit
            function updateUnitLabel() {
                if (sqftOption.checked) {
                    unitLabel.textContent = "sq ft";
                     // Whole numbers for square feet
                    landSizeInput.step = "1";
                }
                else {
                    unitLabel.textContent = "acres";
                    // Allows decimals for acres
                    landSizeInput.step = "0.01";
                }
                // Recalculate conversion when unit changes
                convertSize();
            }

            // Event listeners
            sqftOption.addEventListener("change", updateUnitLabel});
            acreOption.addEventListener("change", updateUnitLabel});
            landSizeInput.addEventListener("input", convertSize);
        });
    </script>

    <!-- Shows or hides PartialCount based on IsComplex checkbox -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Selects the checkbox and the PartialCount container
            var isComplexCheckbox = document.getElementById("IsComplexCheckbox");
            var partialCountContainer = document.getElementById("PartialCountContainer");
            // Ensure required elements exist before adding event listeners
            if (!isComplexCheckbox || !partialCountContainer) {
                console.warn("Show/Hide PartialCount script skipped: Required elements are missing.");
                // Exit script early to prevent errors
                return;
            }
            // Toggles the visiblity of the PartialCount input field when IsComplexCheckbox is checked or unchecked
            function togglePartialCountVisibility() {
                // If checked, remove the hidden class to show the input field
                if (isComplexCheckbox.checked) {
                    partialCountContainer.classList.remove("hidden");
                } 
                // If unchecked, add the hidden class to hide the input field
                else {
                    partialCountContainer.classList.add("hidden");
                }
            }
            // Running it just once when the Page loads to set the correct visibility state
            togglePartialCountVisibility();

            // Add an event listener to the checkbox for when its state changes
            isComplexCheckbox.addEventListener("change", togglePartialCountVisibility);
        });
    </script>

    <!-- Validates whether year of construction is reasonable -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Selects the YearConstructed input field and error message element
            var yearInput = document.getElementById("YearConstructed");
            var yearError = document.getElementById("yearError");

            // Ensure the required elements exist before running the script
            if (!yearInput) {
                console.warn("Year validation script skipped: #YearConstructed input is missing.");
                // Exit script early to prevent errors
                return;
            }

            if (!yearError) {
                console.warn("Year validation script warning: #yearError is missing. Validation will still work, but no error message will be displayed.");
            }

            // Set max year dynamically to prevent selecting future years
            var currentYear = new Date().getFullYear();
            yearInput.setAttribute("max", currentYear);

            // Validates the Year Contructed field
            // Ensures the entered year is within a reasonable range (1800 to current year)
            function validateYearInput() {
                var enteredYear = parseInt(yearInput.value, 10);

                // Check if the year is out of the valid range or if the user enters more than 4 digits
                if (enteredYear > currentYear || enteredYear < 1800 || yearInput.value.length > 4) {
                    // Show error message if yearError exists
                    if (yearError) yearError.style.display = "block";
                    // Prevent form submission
                    yearInput.setCustomValidity("Invalid year");
                }
                else {
                    // Hide error message if yearError exists
                    if (yearError) yearError.style.display = "none";
                    // Allow form submission
                    yearInput.setCustomValidity("");
                }
            }

            // Event listener for year input changes
            yearInput.addEventListener("input", validateYearInput});
        });
    </script>
}
