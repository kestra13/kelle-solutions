@page
@model KelleSolutions.Pages.Properties.MyPropertiesModel
@{ ViewData["Title"] = "User Properties"; }
<!--
Date: 02/22/2025 
Updating MyProperties.cshtml to reflect new and modified viewing table of the Properties entities created by signed-in user.
Adding comments to better explain documentation.
-->

<div class="header-section">
    <p>
        <link rel="stylesheet" href="~/css/mainpages.css" />
        <link href="https://fonts.googleapis.com/css2?family=Sora:wght@100;200;250;300;400;500;600&display=swap" rel="stylesheet">
        <a href="/AT_Dashboard">
            <svg xmlns="http://www.w3.org/2000/svg" height="1.2em" viewBox="0 -960 960 960" width="1.2em" fill="#5f6368">
                <path d="M240-200h133.85v-237.69h212.3V-200H720v-360L480-740.77 240-560v360Zm-60 60v-450l300-225.77L780-590v450H526.15v-237.69h-92.3V-140H180Zm300-330.38Z"/>
            </svg>
        </a>
        <span>/</span> <span class="pagename-text">View My Properties</span>
    </p>
</div>

<body>

<div class="buttons">
    <div class="d-flex">
        <div class="dropdown me-2">
            <label for="dropdownButton" class="button-label">Property type</label>
            <button id="dropdownButton" class="btn btn-outline dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                Select Options
            </button>
            <ul class="dropdown-menu p-2">
                <li>
                    <input class="form-check-input me-2 option-checkbox" type="checkbox" id="typeoption1">
                    <label class="form-check-label" for="typeoption1">Option 1</label>
                </li>
                <li>
                    <input class="form-check-input me-2 option-checkbox" type="checkbox" id="typeoption2">
                    <label class="form-check-label" for="typeoption2">Option 2</label>
                </li>
                <li>
                    <input class="form-check-input me-2 option-checkbox" type="checkbox" id="typeoption3">
                    <label class="form-check-label" for="typeoption3">Option 3</label>
                </li>
            </ul>
        </div>
        <div class="dropdown">
            <label for="dropdownButton" class="button-label">Property status</label>
            <button id="dropdownButton" class="btn btn-outline dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                Select Options
            </button>
            <ul class="dropdown-menu p-2">
                <li>
                    <input class="form-check-input me-2 option-checkbox" type="checkbox" id="statusoption1">
                    <label class="form-check-label" for="statusoption1">All</label>
                </li>
                <li>
                    <input class="form-check-input me-2 option-checkbox" type="checkbox" id="statusoption2">
                    <label class="form-check-label" for="statusoption2">On Hold</label>
                </li>
                <li>
                    <input class="form-check-input me-2 option-checkbox" type="checkbox" id="statusoption3">
                    <label class="form-check-label" for="statusoption3">Open House</label>
                </li>
                <li>
                    <input class="form-check-input me-2 option-checkbox" type="checkbox" id="statusoption4">
                    <label class="form-check-label" for="statusoption4">Active</label>
                </li>
                <li>
                    <input class="form-check-input me-2 option-checkbox" type="checkbox" id="statusoption5">
                    <label class="form-check-label" for="statusoption5">Pending</label>
                </li>
                <li>
                    <input class="form-check-input me-2 option-checkbox" type="checkbox" id="statusoption6">
                    <label class="form-check-label" for="statusoption6">Closed</label>
                </li>
            </ul>
        </div>
    </div>
    <!-- Add Property Button -->
    <button class="gradient-button" data-bs-toggle="modal" data-bs-target="#AddPropertyModal">
        Add
        <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#5f6368">
            <path d="M440-440H200v-80h240v-240h80v240h240v80H520v240h-80v-240Z"/>
        </svg>
    </button>

    <!-- include the available property types -->
    @await Html.PartialAsync("CreatePropertyModal", Model.AvailablePropertyTypesList)

</div>

<div class="content-container">
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Created</th>
                <th>City</th>
                <th>Zip</th>
                <th>Street</th>
                <th>Bed / Bath</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var property in Model.MyProperties) {
                <tr>
                    <td>@property.PropertyID</td>
                    <td>@property.CreatedAt.ToString("yyyy")</td>
                    <td>@property.City</td>
                    <td>@property.ZipCode</td>
                    <td>@property.Address</td>
                    <td>@property.BedCount / @property.BathCount</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="pagination-section">

    <div class="d-flex justify-content-between align-items-center">
        <div class="rows-per-page-container">
            <label for="pageSize" class="rowamount-label">Rows per page:</label>
            <div class="dropdown-wrapper">
                <select id="pageSize" class="form-control dropdown-outline" onchange="updatePageSize()">
                    <option value="5" selected="@(Model.PageSize == 5 ? "selected" : null)">5</option>
                    <option value="10" selected="@(Model.PageSize == 10 ? "selected" : null)">10</option>
                    <option value="20" selected="@(Model.PageSize == 20 ? "selected" : null)">20</option>
                    <option value="50" selected="@(Model.PageSize == 50 ? "selected" : null)">50</option>
                </select>
                <svg class="dropdown-icon" xmlns="http://www.w3.org/2000/svg" height="16px" viewBox="0 0 24 24" width="16px" fill="#5f6368">
                    <path d="M7 10l5 5 5-5z"/>
                </svg>
            </div>
        </div>
    </div>

    <div class="page-navigation">
        <div class="page-desc">
            <span>
                @( (Model.PageNumber - 1) * Model.PageSize + 1) - 
                @(System.Math.Min(Model.PageNumber * Model.PageSize, Model.MyProperties.Count))
                of @Model.MyProperties.Count
            </span>
        </div>

        <div class="page-btn">
            @if (Model.PageNumber > 1)
            {
                <a href="?PageNumber=@(Model.PageNumber - 1)&PageSize=@Model.PageSize">
                    <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#5f6368">
                        <path d="M560-240 320-480l240-240 56 56-184 184 184 184-56 56Z"/>
                    </svg>
                </a>
            }
            else
            {
                <span class="disabled-arrow">
                    <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#d3d3d3">
                        <path d="M560-240 320-480l240-240 56 56-184 184 184 184-56 56Z"/>
                    </svg>
                </span>
            }
        </div>

        <div class="page-btn">
            @if (Model.PageNumber < Model.TotalPages)
            {
                <a href="?PageNumber=@(Model.PageNumber + 1)&PageSize=@Model.PageSize">
                    <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#5f6368">
                        <path d="M504-480 320-664l56-56 240 240-240 240-56-56 184-184Z"/>
                    </svg>
                </a>
            }
            else
            {
                <span class="disabled-arrow">
                    <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#d3d3d3">
                        <path d="M504-480 320-664l56-56 240 240-240 240-56-56 184-184Z"/>
                    </svg>
                </span>
            }
        </div>
    </div>
</div>

</body>


@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            document.querySelectorAll(".dropdown").forEach(dropdown => {
                const checkboxes = dropdown.querySelectorAll(".option-checkbox");
                const dropdownButton = dropdown.querySelector(".dropdown-toggle");
    
                function updateButtonText() {
                    const checkedCount = dropdown.querySelectorAll(".option-checkbox:checked").length;
                    dropdownButton.textContent = checkedCount > 0 ? `${checkedCount} selected` : "Select Options";
                }
    
                checkboxes.forEach(checkbox => {
                    checkbox.addEventListener("change", updateButtonText);
                });
            });
        });
    </script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            console.log("JavaScript Loaded");

            document.getElementById("propertyForm").addEventListener("submit", function (event) {
                // prevent page reload
                event.preventDefault();

                let userID = "some user ID";

                let formData = {
                    Address: document.getElementById("propertyAddress").value.trim(),
                    City: document.getElementById("propertyCity").value.trim(),
                    State: document.getElementById("propertyState").value.trim(),
                    ZipCode: document.getElementById("propertyZipCode").value.trim(),
                    BedCount: parseInt(document.getElementById("bedCount").value) || 0,
                    BathCount: parseInt(document.getElementById("bathCount").value) || 0,
                    GarageCount: parseInt(document.getElementById("garageCount").value) || 0,
                    YearConstructed: parseInt(document.getElementById("yearConstructed").value) || 0,
                    PropertyType: document.getElementById("propertyType").value.trim(),
                    IsComplex: document.getElementById("isComplex").checked,
                    IsRemodeled: document.getElementById("isRemodeled").checked,
                    UserID: userID,
                    IsArchived: false,
                    Size: 0,
                    LandSize: 0,
                    PartialCount: 0,
                    Notes: ""
                };

                console.log("Submitting Form Data:", JSON.stringify(formData));

                fetch("/Properties/MyProperties", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "Accept": "application/json"
                        },
                    body: JSON.stringify(formData)
                })
                .then(response => {
                    console.log("Raw Response:", response);
                    if (!response.ok) {
                        return response.text().then(text=> {
                            throw new Error("Server Error: " + text);
                        });
                    }
                    return response.json().catch(() => ({ success: false, message: "Invalid JSON response!" }));
                })
                .then(data => {
                    console.log("Server Response:", data);

                    if (data.success) {
                        alert("Property added successfully!");
                        // reloads the page to reflect new property
                        location.reload();
                    } else {
                        alert("Error adding property: " + data.message);
                    }
                })
                .catch(error => console.error("Fetch Error:", error));
            });
        });
    </script>

    <script>
        function updatePageSize() {
            var pageSize = document.getElementById("pageSize").value;
            window.location.href = "?PageSize=" + pageSize + "&PageNumber=1";
        }
    </script>
}