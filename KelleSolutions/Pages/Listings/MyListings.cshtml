@page
@model KelleSolutions.Pages.Listings.MyListingsModel
@{ ViewData["Title"] = "My Listings"; }
<!--
Date: 02/23/2025 
Updating MyListings.cshtml to reflect new and modified viewing table of the Listings Entities created by signed-in user.
Adding comments to better explain documentation.
-->
<link rel="stylesheet" href="~/css/mainpages.css" />
<link href="https://fonts.googleapis.com/css2?family=Sora:wght@100;200;250;300;400;500;600&display=swap" rel="stylesheet">
<style>

    .btn.btn-gray {
        background-color: #f1f1f1 !important;
        border: none !important;
        box-shadow: none !important;
    }

    .btn.btn-gray:hover {
        background-color: #e3e3e3 !important;
    }
    .btn.btn-purple-active {
        background-color: #4a154b !important;
        border: none !important;
        box-shadow: none !important;
    }

    .btn.btn-purple-active .btn-text {
        color: white !important;
    }

    .menu-icon {
        cursor: pointer;
    }

    .btn-icon {
        height: 20px;
        width: 20px;
        margin-right: 8px;
        vertical-align: middle;
    }

    .btn-text {
        color: #585858;
    }

    .id-link {
        color: #4a154b;
        text-decoration: none;
        font-weight: 500;
    }
    
    .id-link:hover {
        text-decoration: underline;
        color: #e01e5a;
    }

    .dropdown-toggle::after {
        margin: 0px -4px 0px 9px;              /* space between text and arrow */
        vertical-align: middle;        /* align with text */
        border-top-color: #585858 !important; /* change arrow color */
        border-width: 0.35em 0.35em 0;   /* change arrow size */    
    }

    #listingsDropdown.dropdown-toggle::after {
        margin: 0px -4px 0px 9px;              /* space between text and arrow */
        vertical-align: middle;        /* align with text */
        border-top-color: #ffffff !important; /* change arrow color */
        border-width: 0.35em 0.35em 0;   /* change arrow size */
    }
</style>
@if (User.IsInRole("Admin") || User.IsInRole("Broker")) {
    <div class="nav-bar-icons">

    <div class="button-container d-flex align-items-center" style="gap: 12px;">
    <!-- DASHBOARD -->
    <a href="/Admin/adminDashboard" class="btn btn-primary btn-gray rounded-pill d-flex align-items-center">
        <img src="~/images/dashboard_logo_selected.svg" alt="" class="btn-icon">
        <span class="btn-text">Dashboard</span>
    </a>

    <!-- LISTINGS Dropdown -->
    <div class="dropdown d-inline-block" >
        <button class="btn btn-primary btn-purple-active rounded-pill dropdown-toggle d-flex align-items-center"
                type="button"
                id="listingsDropdown"
                data-bs-toggle="dropdown"
                aria-expanded="false">
            <img src="~/images/selected_listings.svg" alt="" class="btn-icon">
            <span class="btn-text">Listings</span>
        </button>
        <ul class="dropdown-menu" aria-labelledby="listingsDropdown">
            <li><a class="dropdown-item" href="/Listings/MyListings">My Listings</a></li>
            <li><a class="dropdown-item" href="/Listings/AllListings">All Listings</a></li>
        </ul>
    </div>

    <!-- PROPERTIES Dropdown -->
    <div class="dropdown d-inline-block">
        <button class="btn btn-primary btn-gray rounded-pill dropdown-toggle d-flex align-items-center" 
                type="button" 
                id="propertiesDropdown" 
                data-bs-toggle="dropdown" 
                aria-expanded="false">
            <img src="~/images/properties.svg" alt="" class="btn-icon">
            <span class="btn-text">Properties</span>
        </button>
        <ul class="dropdown-menu" aria-labelledby="propertiesDropdown">
            <li><a class="dropdown-item" href="/Properties/MyProperties">My Properties</a></li>
            <li><a class="dropdown-item" href="/Properties/AllProperties">All Properties</a></li>
        </ul>
    </div>

    <!-- VENDORS Dropdown -->
    <div class="dropdown d-inline-block">
        <button class="btn btn-primary btn-gray rounded-pill dropdown-toggle d-flex align-items-center" 
                type="button" 
                id="propertiesDropdown" 
                data-bs-toggle="dropdown" 
                aria-expanded="false">
            <img src="~/images/vendors.svg" alt="" class="btn-icon">
            <span class="btn-text">Vendors</span>
        </button>
        <ul class="dropdown-menu" aria-labelledby="propertiesDropdown">
            <li><a class="dropdown-item" href="/Vendors/MyVendors">My Vendors</a></li> 
            <li><a class="dropdown-item" href="/#">All Vendors</a></li> <!-- placeholder for entities/vendors page-->
        </ul>
    </div>
    
    <!-- ACTIONS -->
    <a href="/Actions/MyActions" class="btn btn-primary btn-gray rounded-pill d-flex align-items-center">
        <img src="~/images/actions_logo_notSelected.svg" alt="" class="btn-icon">
        <span class="btn-text">Actions</span>
    </a>

    <!-- LEADS Dropdown -->
    <div class="dropdown d-inline-block">
        <button class="btn btn-primary btn-gray rounded-pill dropdown-toggle d-flex align-items-center"
                type="button"
                id="leadsDropdown"
                data-bs-toggle="dropdown"
                aria-expanded="false">
            <img src="~/images/leads_logo_notSelected.svg" alt="" class="btn-icon">
            <span class="btn-text">Leads</span>
        </button>
        <ul class="dropdown-menu" aria-labelledby="leadsDropdown">
            <li><a class="dropdown-item" href="/Leads/MyLeads">My Leads</a></li>
            <li><a class="dropdown-item" href="/Leads/Leads">All Leads</a></li>
        </ul>
    </div>

    <!-- PEOPLE -->
    <a href="/People/People" class="btn btn-primary btn-gray rounded-pill d-flex align-items-center">
        <img src="~/images/people_logo_notSelected.svg" alt="" class="btn-icon">
        <span class="btn-text">People</span>
    </a>



    </div>
    </div>

    <!-- SETTINGS button NOT NEEDED, # uncomment to show -->
    @* <a href="/Admin/Settings" 
       class="btn btn-primary btn-gray rounded-pill d-flex align-items-center justify-content-center p-2 position-absolute" 
       style="width: 40px; height: 40px; right: 130px; top: 85px;">
        <img src="~/images/vertical_dots_button.svg" alt="" style="width: 24px; height: 24px;">
    </a> *@

}

else if (User.IsInRole("Agent")) {
    <div class="nav-bar-icons">
        <div class="button-container d-flex align-items-center" style="gap: 12px;">
        <!-- DASHBOARD -->
        <a href="/Dashboard" class="btn btn-primary btn-gray rounded-pill d-flex align-items-center">
            <img src="~/images/dashboard_logo_selected.svg" alt="" class="btn-icon">
            <span class="btn-text">Dashboard</span>
        </a>

        <!-- LISTINGS Dropdown -->
        <a href="/Listings/MyListings" class="btn btn-primary btn-purple-active rounded-pill d-flex align-items-center">
            <img src="~/images/selected_listings.svg" alt="" class="btn-icon">
            <span class="btn-text">Listings</span>
        </a>

        <!-- ACTIONS -->
        <a href="/Actions/MyActions" class="btn btn-primary btn-gray rounded-pill d-flex align-items-center">
            <img src="~/images/actions_logo_notSelected.svg" alt="" class="btn-icon">
            <span class="btn-text">Actions</span>
        </a>

        <!-- LEADS Dropdown -->
        <a href="/Leads/MyLeads" class="btn btn-primary btn-gray rounded-pill d-flex align-items-center">
            <img src="~/images/leads_logo_notSelected.svg" alt="" class="btn-icon">
            <span class="btn-text">Leads</span>
        </a>

        <!-- PEOPLE -->
        <a href="/People/People" class="btn btn-primary btn-gray rounded-pill d-flex align-items-center">
            <img src="~/images/people_logo_notSelected.svg" alt="" class="btn-icon">
            <span class="btn-text">People</span>
        </a>

        <div class="dropdown">
            <button id="menuButton" class="btn btn-primary btn-gray rounded-pill d-flex align-items-center justify-content-center"
                    data-bs-toggle="dropdown" aria-expanded="false" style="padding: 8px; border: none;">
                <span id="menuIcon">
                    <!-- Initial Hamburger SVG -->
                    <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#5f6368">
                        <path d="M140-254.62v-59.99h680v59.99H140ZM140-450v-60h680v60H140Zm0-195.39v-59.99h680v59.99H140Z"/>
                    </svg>
                </span>
            </button>

            <ul class="dropdown-menu dropdown-menu-end" id="customDropdown">
                <li>
                    <a class="dropdown-item" href="/Properties/MyProperties">
                        <img src="~/images/properties.svg" class="btn-icon"> Properties
                    </a>
                </li>
                <li>
                    <a class="dropdown-item" href="/Vendors/MyVendors">
                        <img src="~/images/vendors.svg" class="btn-icon"> Vendors
                    </a>
                </li>
            </ul>
        </div>

        <!-- SETTINGS button NOT NEEDED, # uncomment to show -->
        @* <a href="/Admin/Settings" 
           class="btn btn-primary btn-gray rounded-pill d-flex align-items-center justify-content-center p-2 position-absolute" 
           style="width: 40px; height: 40px; right: 130px; top: 85px;">
            <img src="~/images/vertical_dots_button.svg" alt="" style="width: 24px; height: 24px;">
        </a> *@

    </div>
    </div>

}
<div>
    <div class="header-section">
        <p>
            <a href="/Dashboard">
                <svg xmlns="http://www.w3.org/2000/svg" height="1.2em" viewBox="0 -960 960 960" width="1.2em" fill="#5f6368">
                    <path d="M240-200h133.85v-237.69h212.3V-200H720v-360L480-740.77 240-560v360Zm-60 60v-450l300-225.77L780-590v450H526.15v-237.69h-92.3V-140H180Zm300-330.38Z"/>
                </svg>
            </a>
            <span>/</span> <span class="pagename-text">My Listings</span>
        </p>
    </div>
</div>

<body>

<div class="buttons">
    <div class="d-flex">
        <div class="dropdown me-2">
            <label for="sourceDropdown" class="button-label">Listing source</label>
            <button id="sourceDropdown" class="btn btn-outline dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                Select Options
            </button>
            <ul class="dropdown-menu p-2">
                <li>
                    <input class="form-check-input me-2 option-checkbox source-filter" type="checkbox" id="sourceOption1" value="Option1">
                    <label class="form-check-label" for="sourceOption1">Option 1</label>
                </li>
                <li>
                    <input class="form-check-input me-2 option-checkbox source-filter" type="checkbox" id="sourceOption2" value="Option2">
                    <label class="form-check-label" for="sourceOption2">Option 2</label>
                </li>
                <li>
                    <input class="form-check-input me-2 option-checkbox source-filter" type="checkbox" id="sourceOption3" value="Option3">
                    <label class="form-check-label" for="sourceOption3">Option 3</label>
                </li>
            </ul>
        </div>
        <div class="dropdown">
            <label for="statusDropdown" class="button-label">Listing status</label>
            <button id="statusDropdown" class="btn btn-outline dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                Select Options
            </button>
            <ul class="dropdown-menu p-2">
                <li>
                    <input class="form-check-input me-2 option-checkbox status-filter" type="checkbox" id="statusAll" value="All">
                    <label class="form-check-label" for="statusAll">All</label>
                </li>
                <li>
                    <input class="form-check-input me-2 option-checkbox status-filter" type="checkbox" id="statusOnHold" value="OnHold">
                    <label class="form-check-label" for="statusOnHold">On Hold</label>
                </li>
                <li>
                    <input class="form-check-input me-2 option-checkbox status-filter" type="checkbox" id="statusOpenHouse" value="OpenHouse">
                    <label class="form-check-label" for="statusOpenHouse">Open House</label>
                </li>
                <li>
                    <input class="form-check-input me-2 option-checkbox status-filter" type="checkbox" id="statusActive" value="Active">
                    <label class="form-check-label" for="statusActive">Active</label>
                </li>
                <li>
                    <input class="form-check-input me-2 option-checkbox status-filter" type="checkbox" id="statusPending" value="Pending">
                    <label class="form-check-label" for="statusPending">Pending</label>
                </li>
                <li>
                    <input class="form-check-input me-2 option-checkbox status-filter" type="checkbox" id="statusClosed" value="Closed">
                    <label class="form-check-label" for="statusClosed">Closed</label>
                </li>
                <li>
                    <input class="form-check-input me-2 option-checkbox status-filter" type="checkbox" id="statusExpired" value="Expired">
                    <label class="form-check-label" for="statusExpired">Expired</label>
                </li>
                <li>
                    <input class="form-check-input me-2 option-checkbox status-filter" type="checkbox" id="statusWithdrawn" value="Withdrawn">
                    <label class="form-check-label" for="statusWithdrawn">Withdrawn</label>
                </li>
                <li>
                    <input class="form-check-input me-2 option-checkbox status-filter" type="checkbox" id="statusCanceled" value="Canceled">
                    <label class="form-check-label" for="statusCanceled">Canceled</label>
                </li>
            </ul>
        </div>
    </div>
    <!-- Add Listing Button -->
    <button class="gradient-button" data-bs-toggle="modal" data-bs-target="#AddListingModal">
        Add
        <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#5f6368">
            <path d="M440-440H200v-80h240v-240h80v240h240v80H520v240h-80v-240Z"/>
        </svg>
    </button>
    
    <!-- include the available listing status types -->
    <partial name="CreateListingModal" model="Model.CreateListingModel" />

</div>

<div class="content-container">
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Created</th>
                <th>Status</th>
                <th>Affiliation</th>
                <th>Price</th>
                <th>Address</th>
                <th>Actions</th> <!-- New column -->
            </tr>
        </thead>
        <tbody>
            @foreach (var listing in Model.MyListings) {
                <tr data-listing-id="@listing.ListingID">
                    <td><a href="/Listings/ViewListing?listingId=@listing.ListingID" class="id-link">@listing.ListingID</a></td>
                    <td>@listing.ListingDate.ToString("yyyy-MM-dd")</td>
                    <td>
                        <div class="dropdown">
                            <button class="btn status-btn" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                <span id="currentStatus" class="status-text">@listing.Status</span>
                                <span class="status-btn-svg">
                                    <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill=white><path d="M480-373.85 303.85-550h352.3L480-373.85Z"/></svg>
                                </span>
                            </button>
                            <ul class="dropdown-menu status-menu">
                                <li><a class="dropdown-item status-option" href="#" data-status="ON HOLD">ON HOLD</a></li>
                                <li><a class="dropdown-item status-option" href="#" data-status="OPEN HOUSE">OPEN HOUSE</a></li>
                                <li><a class="dropdown-item status-option" href="#" data-status="ACTIVE">ACTIVE</a></li>
                                <li><a class="dropdown-item status-option" href="#" data-status="PENDING">PENDING</a></li>
                                <li><a class="dropdown-item status-option" href="#" data-status="CLOSED">CLOSED</a></li>
                                <li><a class="dropdown-item status-option" href="#" data-status="EXPIRED">EXPIRED</a></li>
                                <li><a class="dropdown-item status-option" href="#" data-status="WITHDRAWN">WITHDRAWN</a></li>
                                <li><a class="dropdown-item status-option" href="#" data-status="CANCELED">CANCELED</a></li>
                            </ul>
                        </div>
                    </td>
                    <td>@listing.Affiliation</td>
                    <td>@listing.Price.ToString("C0")</td>
                    <td>@listing.Address</td>
                    <td>
                        <button type="button" class="btn btn-danger btn-sm delete-listing-btn" 
                                data-listing-id="@listing.ListingID"
                                data-bs-toggle="modal" 
                                data-bs-target="#deleteListingModal">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z"/>
                                <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z"/>
                            </svg>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div><div class="pagination-section">
    <div class="d-flex justify-content-between align-items-center">
        <div class="rows-per-page-container">
            <label for="pageSize" class="rowamount-label">Rows per page:</label>
            <div class="dropdown-wrapper">
                <select id="pageSize" class="form-control dropdown-outline" onchange="updatePageSize()">
                    <option value="5" selected="@(Model.PageSize == 5 ? "selected" : null)">5</option>
                    <option value="10" selected="@(Model.PageSize == 10 ? "selected" : null)">10</option>
                    <option value="20" selected="@(Model.PageSize == 20 ? "selected" : null)">20</option>
                    <option value="50" selected="@(Model.PageSize == 50 ? "selected" : null)">50</option>
                </select>
                <svg class="dropdown-icon" xmlns="http://www.w3.org/2000/svg" height="16px" viewBox="0 0 24 24" width="16px" fill="#5f6368">
                    <path d="M7 10l5 5 5-5z"/>
                </svg>
            </div>
        </div>
    </div>

    <div class="page-navigation">
        <div class="page-desc">
            <span>
                @( (Model.PageNumber - 1) * Model.PageSize + 1) - 
                @(System.Math.Min(Model.PageNumber * Model.PageSize, Model.MyListings.Count))
                of @Model.MyListings.Count
            </span>
        </div>

        <div class="page-btn">
            @if (Model.PageNumber > 1) {
                <a href="?PageNumber=@(Model.PageNumber - 1)&PageSize=@Model.PageSize">
                    <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#5f6368">
                        <path d="M560-240 320-480l240-240 56 56-184 184 184 184-56 56Z"/>
                    </svg>
                </a>
            }
            else {
                <span class="disabled-arrow">
                    <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#d3d3d3">
                        <path d="M560-240 320-480l240-240 56 56-184 184 184 184-56 56Z"/>
                    </svg>
                </span>
            }
        </div>

        <div class="page-btn">
            @if (Model.PageNumber < Model.TotalPages) {
                <a href="?PageNumber=@(Model.PageNumber + 1)&PageSize=@Model.PageSize">
                                        <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#5f6368">
                        <path d="M504-480 320-664l56-56 240 240-240 240-56-56 184-184Z"/>
                    </svg>
                </a>
            }
            else {
                <span class="disabled-arrow">
                    <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#d3d3d3">
                        <path d="M504-480 320-664l56-56 240 240-240 240-56-56 184-184Z"/>
                    </svg>
                </span>
            }
        </div>
    </div>
</div>

</body>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteListingModal" tabindex="-1" aria-labelledby="deleteListingModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteListingModalLabel">Delete Listing</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this listing?</p>
                <p class="text-danger"><strong>This action cannot be undone.</strong></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            let elements = document.querySelectorAll(".some-class");
            if (elements.length > 0) {
                elements.forEach(el => console.log(el.textContent));
            } else {
                console.warn("No elements found with the given selector.");
            }
        });
    </script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            console.log("JavaScript Loaded for Create Listing Modal");

            document.getElementById("createListingForm").addEventListener("submit", function (event) {
                event.preventDefault(); // Prevent page reload

                let formData = {
                    PropertyId: document.getElementById("property").value.trim(),
                    Price: document.getElementById("listingPrice").value.trim(),
                    Status: document.getElementById("listingStatus").value.trim(),
                    Source: document.getElementById("listingSource").value.trim()
                };

                console.log("Submitting Listing Data:", JSON.stringify(formData));

                fetch("/Listings/MyListings?handler=CreateListing", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "Accept": "application/json"
                    },
                    body: JSON.stringify(formData)
                })
                .then(response => response.json())
                .then(data => {
                    console.log("Server Response:", data);
                    if (data.success) {
                        alert("Listing added successfully!");
                        $("#AddListingModal").modal("hide");
                        location.reload();
                    } else {
                        alert("Error adding listing: " + data.message);
                    }
                })
                .catch(error => console.error("Fetch Error:", error));
            });
        });
    </script>

    <script>
        function updatePageSize() {
            var pageSize = document.getElementById("pageSize").value;
            window.location.href = "?PageSize=" + pageSize + "&PageNumber=1";
        }
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            document.querySelectorAll('.dropdown').forEach(dropdown => {
                let statusBtn = dropdown.querySelector('.status-btn');
                let statusText = dropdown.querySelector('.status-text');

                const statusColors = {
                    "ON HOLD": "status-btn-onhold",
                    "OPEN HOUSE": "status-btn-openhouse",
                    "ACTIVE": "status-btn-active",
                    "PENDING": "status-btn-pending",
                    "CLOSED": "status-btn-closed",
                    "EXPIRED": "status-btn-expired",
                    "WITHDRAWN": "status-btn-withdrawn",
                    "CANCELED": "status-btn-canceled"
                };

                // Function to update the button color
                function updateButtonColor(status) {
                    // Remove any previously applied classes
                    statusBtn.classList.remove(...Object.values(statusColors));

                    // Apply the new class based on status
                    if (statusColors[status]) {
                        statusBtn.classList.add(statusColors[status]);
                    }
                }

                // Wait until Razor syntax renders the dynamic status, then apply the correct color
                setTimeout(() => {
                    let currentStatus = statusText.textContent.trim();
                    updateButtonColor(currentStatus);
                }, 0);

                // Event listeners for dropdown selection
                dropdown.querySelectorAll('.status-option').forEach(option => {
                    option.addEventListener('click', function (e) {
                        e.preventDefault();

                        // Get the new status value
                        let newStatus = this.getAttribute('data-status');
                        let listingId = this.closest('tr').getAttribute('data-listing-id');
                        
                        fetch(`/Listings/MyListings?handler=UpdateStatus`, {
                            method: "POST",
                            headers: { 
                                "Content-Type": "application/json",
                                "Accept": "application/json",
                                "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
                            },
                            body: JSON.stringify({ Id: listingId, Status: newStatus })
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                console.log("Status updated successfully");
                            } else {
                                console.error("Failed to update status:", data.message);
                            }
                        })
                        .catch(error => console.error("Error:", error));

                        // Update button text
                        statusText.textContent = newStatus;

                        // Update button color
                        updateButtonColor(newStatus);
                    });
                });
            });
        }); 
    </script>

    <!--<script>
        document.addEventListener("DOMContentLoaded", function () {
            document.querySelectorAll(".status-option").forEach(item => {
                item.addEventListener("click", function (event) {
                    event.preventDefault();
                    let newStatus = this.getAttribute("data-value");
                    let listingId = this.getAttribute("data-listing-id");

                    // updates button text
                    this.closest(".btn-group").querySelector("button").innerText = newStatus;

                    // sends an AJAX request to update the status
                    fetch(`/Listings/MyListings?handler=UpdateStatus`, {
                        method: "POST",
                        headers: { 
                            "Content-Type": "application/json",
                            "Accept": "application/json",
                            "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({ Id: listingId, Status: newStatus })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            console.log("Status updated successfully");
                        } else {
                            console.error("Failed to update status:", data.message);
                        }
                    })
                    .catch(error => console.error("Error:", error));
                });
            });
        });
    </script>-->
    
    <script>
        function menuIcon(img) {
            if(img.src.includes("/images/menu.svg")) {
                img.src = "/images/menu_open.svg";
            } else {
                img.src = "/images/menu.svg";
            }
        }
    </script>
    
    <!-- Real-Time Status Filtering -->
    <script>
        // Status filtering
        document.addEventListener("DOMContentLoaded", function() {
            // Get all status checkboxes
            const statusCheckboxes = document.querySelectorAll('.status-filter');
            
            // Add change event listener to each checkbox
            statusCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', filterListings);
            });
            
            // Special handling for "All" checkbox
            const allCheckbox = document.getElementById('statusAll');
            if (allCheckbox) {
                allCheckbox.addEventListener('change', function() {
                    if (this.checked) {
                        // If "All" is checked, uncheck other options
                        statusCheckboxes.forEach(cb => {
                            if (cb.id !== 'statusAll') {
                                cb.checked = false;
                            }
                        });
                    }
                    filterListings();
                });
            }
            
    // Filter listings based on selected statuses            
    function filterListings() {
    // Get all selected statuses
    const selectedStatuses = [];
    let allSelected = false;
    
    statusCheckboxes.forEach(checkbox => {
        if (checkbox.checked) {
            if (checkbox.value === 'All') {
                allSelected = true;
            } else {
                // Convert camelCase to SPACED UPPERCASE (e.g., OpenHouse → OPEN HOUSE)
                const formattedValue = checkbox.value.replace(/([A-Z])/g, ' $1').trim().toUpperCase();
                selectedStatuses.push(formattedValue);
                console.log("Formatted selected status:", formattedValue);
            }
        }
    });
    
    console.log("Selected statuses:", selectedStatuses);
    // Get all table rows except header
    const rows = document.querySelectorAll('.table tbody tr');
    
    rows.forEach(row => {
        // Get ONLY the visible status button text, not all dropdown options
        const statusButton = row.querySelector('td:nth-child(3) .status-btn');
        const statusText = statusButton ? 
            statusButton.querySelector('.status-text').textContent.trim().toUpperCase() : '';
        
        console.log("Row status:", statusText);
        // Show/hide row based on filtering
        if (allSelected || selectedStatuses.length === 0) {
            // If "All" is selected or no filter is applied, show all rows
            row.style.display = '';
        } else {
            // Show row only if its status is in the selected statuses
            const statusMatches = selectedStatuses.includes(statusText);
            row.style.display = statusMatches ? '' : 'none';
        }
    });
    
    updateFilterButtonText();
}
            
            function updateFilterButtonText() {
                const dropdownButton = document.getElementById('statusDropdown');
                if (!dropdownButton) return;
                
                const selectedCount = Array.from(statusCheckboxes)
                    .filter(cb => cb.checked && cb.value !== 'All')
                    .length;
                    
                if (document.getElementById('statusAll')?.checked) {
                    dropdownButton.textContent = 'All';
                } else if (selectedCount > 0) {
                    dropdownButton.textContent = `${selectedCount} selected`;
                } else {
                    dropdownButton.textContent = 'Select Options';
                }
            }
        });
    </script>

    <!-- Delete Listing Script -->
<script>
    // Handle listing deletion
    document.addEventListener("DOMContentLoaded", function() {
        let listingIdToDelete = null;
        
        // Store the listing ID when delete button is clicked
        document.querySelectorAll('.delete-listing-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                listingIdToDelete = this.getAttribute('data-listing-id');
                console.log("Preparing to delete listing ID:", listingIdToDelete);
            });
        });
        
// Handle the confirmation button click
document.getElementById('confirmDeleteBtn').addEventListener('click', function() {
    if (listingIdToDelete) {
        fetch('/Listings/MyListings?handler=DeleteListing', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({ Id: parseInt(listingIdToDelete) })
        })
        .then(response => response.json())
        .then(data => {
            // Try to close the modal, but don't worry if it fails
            try {
                const modalElement = document.getElementById('deleteListingModal');
                const bsModal = bootstrap.Modal.getInstance(modalElement);
                if (bsModal) bsModal.hide();
            } catch (e) {
                // Ignore any modal closing errors
            }
            
            // Always show alert and reload
            if (data && data.success) {
                alert("Listing successfully deleted!");
                window.location.reload();
            } else {
                alert("Error deleting listing: " + (data?.message || "Unknown error"));
            }
        })
        .catch(error => {
            // Even if there's an error, try to alert and reload
            alert("Request completed. Refreshing page.");
            window.location.reload();
        });
    }
});

        // Update pagination count after deletion
        function updatePaginationCount() {
            // Get the current count elements
            const countElement = document.querySelector('.page-desc span');
            if (!countElement) return;
            
            // Get all table rows (listings) that are currently displayed
            const visibleRows = document.querySelectorAll('.table tbody tr:not([style*="display: none"])').length;
            
            // Parse the current text to update the numbers
            const countText = countElement.textContent;
            const match = countText.match(/(\d+)\s*-\s*(\d+)\s*of\s*(\d+)/);
            
            if (match && match.length === 4) {
                const start = parseInt(match[1]);
                const end = Math.min(parseInt(match[2]), visibleRows);
                const total = parseInt(match[3]) - 1; // Reduce total by 1
                
                // Update text
                countElement.textContent = `${start} - ${end} of ${total}`;
            }
        }
    });
</script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const button = document.getElementById("menuButton");
            const iconContainer = document.getElementById("menuIcon");

            const openSVG = `
                <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#5f6368">
                    <path d="M140-260v-60h488.46v60H140Zm637.85-38.08L595.15-480l182.7-181.54L820-619.38 679.46-480 820-340.23l-42.15 42.15ZM140-450v-60h371.54v60H140Zm0-190v-60h488.46v60H140Z"/>
                </svg>`;

            const defaultSVG = `
                <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#5f6368">
                    <path d="M140-254.62v-59.99h680v59.99H140ZM140-450v-60h680v60H140Zm0-195.39v-59.99h680v59.99H140Z"/>
                </svg>`;

            // Use Bootstrap's Dropdown object to attach events
            const dropdownToggle = new bootstrap.Dropdown(button);

            button.addEventListener('show.bs.dropdown', () => {
                iconContainer.innerHTML = openSVG;
            });

            button.addEventListener('hide.bs.dropdown', () => {
                iconContainer.innerHTML = defaultSVG;
            });
        });
    </script>

}
