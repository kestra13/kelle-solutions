@page
@model KelleSolutions.Pages.Listings.MyListingsModel
@{ ViewData["Title"] = "User Listings"; }
<!--
Date: 02/23/2025 
Updating MyListings.cshtml to reflect new and modified viewing table of the Listings Entities created by signed-in user.
Adding comments to better explain documentation.
-->
<div class="header-section">
    <p>
        <!-- I don't think this mainpages.css is needed anymore -->
        <link rel="stylesheet" href="~/css/mainpages.css" />
        <link href="https://fonts.googleapis.com/css2?family=Sora:wght@100;200;250;300;400;500;600&display=swap" rel="stylesheet">
        <a href="/AT_Dashboard">
            <svg xmlns="http://www.w3.org/2000/svg" height="1.2em" viewBox="0 -960 960 960" width="1.2em" fill="#5f6368"><path d="M240-200h133.85v-237.69h212.3V-200H720v-360L480-740.77 240-560v360Zm-60 60v-450l300-225.77L780-590v450H526.15v-237.69h-92.3V-140H180Zm300-330.38Z"/></svg>
        </a>
        <span>/</span> <span class="pagename-text">View My Listings</span>
    </p>
</div>

<body>

<div class="buttons">
    <div class="d-flex">
        <div class="dropdown me-2">
            <label for="dropdownButton" class="button-label">Listing source</label>
            <button id="dropdownButton" class="btn btn-outline dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                Select Options
            </button>
            <ul class="dropdown-menu p-2">
                <li>
                    <input class="form-check-input me-2 option-checkbox" type="checkbox" id="option1">
                    <label class="form-check-label" for="option1">Option 1</label>
                </li>
                <li>
                    <input class="form-check-input me-2 option-checkbox" type="checkbox" id="option2">
                    <label class="form-check-label" for="option2">Option 2</label>
                </li>
                <li>
                    <input class="form-check-input me-2 option-checkbox" type="checkbox" id="option3">
                    <label class="form-check-label" for="option3">Option 3</label>
                </li>
            </ul>
        </div>
        <div class="dropdown">
            <label for="dropdownButton" class="button-label">Listing status</label>
            <button id="dropdownButton" class="btn btn-outline dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                Select Options
            </button>
            <ul class="dropdown-menu p-2">
                <li>
                    <input class="form-check-input me-2 option-checkbox" type="checkbox" id="option1">
                    <label class="form-check-label" for="option1">All</label>
                </li>
                <li>
                    <input class="form-check-input me-2 option-checkbox" type="checkbox" id="option2">
                    <label class="form-check-label" for="option2">On Hold</label>
                </li>
                <li>
                    <input class="form-check-input me-2 option-checkbox" type="checkbox" id="option3">
                    <label class="form-check-label" for="option3">Open House</label>
                </li>
                <li>
                    <input class="form-check-input me-2 option-checkbox" type="checkbox" id="option4">
                    <label class="form-check-label" for="option1">Active</label>
                </li>
                <li>
                    <input class="form-check-input me-2 option-checkbox" type="checkbox" id="option5">
                    <label class="form-check-label" for="option2">Pending</label>
                </li>
                <li>
                    <input class="form-check-input me-2 option-checkbox" type="checkbox" id="option6">
                    <label class="form-check-label" for="option3">Closed</label>
                </li>
                <li>
                    <input class="form-check-input me-2 option-checkbox" type="checkbox" id="option7">
                    <label class="form-check-label" for="option1">Expired</label>
                </li>
                <li>
                    <input class="form-check-input me-2 option-checkbox" type="checkbox" id="option8">
                    <label class="form-check-label" for="option2">Withdrawn</label>
                </li>
                <li>
                    <input class="form-check-input me-2 option-checkbox" type="checkbox" id="option9">
                    <label class="form-check-label" for="option3">Canceled</label>
                </li>
            </ul>
        </div>
    </div>
    <!-- Add Listing Button -->
    <button class="gradient-button" data-bs-toggle="modal" data-bs-target="#AddListingModal">
        Add
        <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#5f6368">
            <path d="M440-440H200v-80h240v-240h80v240h240v80H520v240h-80v-240Z"/>
        </svg>
    </button>
    
    <!-- include the available listing status types -->
    <partial name="CreateListingModal" model="Model.CreateListingModel" />

</div>

<div class="content-container">
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Created</th>
                <th>Status</th>
                <th>Team</th>
                <th>Price</th>
                <th>Address</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var listing in Model.MyListings) {
                <tr>
                    <td>@listing.ListingID</td>
                    <td>@listing.ListingDate.ToString("yyyy-MM-dd")</td>
                    <td>
                        <div class="btn-group">
                            <button type="button" class="btn dropdown-outline">
                                @listing.Status
                            </button>
                            <button type="button" class="btn dropdown-outline dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></button>
                                <div class="dropdown-menu">
                                    @foreach (var status in Enum.GetNames(typeof(KelleSolutions.Models.Listing.StatusTypes))) {
                                        <li>
                                            <a class="dropdown-item status-option" href="#"
                                                data-value="@status"
                                                data-listing-id="@listing.ListingID">
                                                @status
                                            </a>
                                        </li>
                                    }
                                </div>
                        </div>
                    </td>
                    <td>@listing.Team</td>
                    <!-- "C0" formats currency to 0 decimal places -->
                    <td>@listing.Price.ToString("C0")</td>
                    <td>@listing.Address</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="pagination-section">

    <div class="d-flex justify-content-between align-items-center">
        <div class="rows-per-page-container">
            <label for="pageSize" class="rowamount-label">Rows per page:</label>
            <div class="dropdown-wrapper">
                <select id="pageSize" class="form-control dropdown-outline" onchange="updatePageSize()">
                    <option value="5" selected="@(Model.PageSize == 5 ? "selected" : null)">5</option>
                    <option value="10" selected="@(Model.PageSize == 10 ? "selected" : null)">10</option>
                    <option value="20" selected="@(Model.PageSize == 20 ? "selected" : null)">20</option>
                    <option value="50" selected="@(Model.PageSize == 50 ? "selected" : null)">50</option>
                </select>
                <svg class="dropdown-icon" xmlns="http://www.w3.org/2000/svg" height="16px" viewBox="0 0 24 24" width="16px" fill="#5f6368">
                    <path d="M7 10l5 5 5-5z"/>
                </svg>
            </div>
        </div>
    </div>

    <div class="page-navigation">
        <div class="page-desc">
            <span>
                @( (Model.PageNumber - 1) * Model.PageSize + 1) - 
                @(System.Math.Min(Model.PageNumber * Model.PageSize, Model.MyListings.Count))
                of @Model.MyListings.Count
            </span>
        </div>

        <div class="page-btn">
            @if (Model.PageNumber > 1) {
                <a href="?PageNumber=@(Model.PageNumber - 1)&PageSize=@Model.PageSize">
                    <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#5f6368">
                        <path d="M560-240 320-480l240-240 56 56-184 184 184 184-56 56Z"/>
                    </svg>
                </a>
            }
            else {
                <span class="disabled-arrow">
                    <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#d3d3d3">
                        <path d="M560-240 320-480l240-240 56 56-184 184 184 184-56 56Z"/>
                    </svg>
                </span>
            }
        </div>

        <div class="page-btn">
            @if (Model.PageNumber < Model.TotalPages) {
                <a href="?PageNumber=@(Model.PageNumber + 1)&PageSize=@Model.PageSize">
                    <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#5f6368">
                        <path d="M504-480 320-664l56-56 240 240-240 240-56-56 184-184Z"/>
                    </svg>
                </a>
            }
            else {
                <span class="disabled-arrow">
                    <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#d3d3d3">
                        <path d="M504-480 320-664l56-56 240 240-240 240-56-56 184-184Z"/>
                    </svg>
                </span>
            }
        </div>

    </div>
</div>

</body>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            let elements = document.querySelectorAll(".some-class");
            if (elements.length > 0) {
                elements.forEach(el => console.log(el.textContent));
            } else {
                console.warn("No elements found with the given selector.");
            }
        });
    </script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            console.log("JavaScript Loaded for Create Listing Modal");

            document.getElementById("createListingForm").addEventListener("submit", function (event) {
                event.preventDefault(); // Prevent page reload

                let formData = {
                    PropertyId: document.getElementById("propertyId").value.trim(),
                    Price: document.getElementById("listingPrice").value.trim(),
                    Status: document.getElementById("listingStatus").value.trim(),
                    Team: document.getElementById("listingTeam").value.trim()
                };

                console.log("Submitting Listing Data:", JSON.stringify(formData));

                fetch("/Listings/MyListings?handler=CreateListing", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "Accept": "application/json"
                    },
                    body: JSON.stringify(formData)
                })
                .then(response => response.json())
                .then(data => {
                    console.log("Server Response:", data);
                    if (data.success) {
                        alert("Listing added successfully!");
                        $("#createListingModal").modal("hide");
                        location.reload();
                    } else {
                        alert("Error adding listing: " + data.message);
                    }
                })
                .catch(error => console.error("Fetch Error:", error));
            });
        });
    </script>



    <script>
        function updatePageSize() {
            var pageSize = document.getElementById("pageSize").value;
            window.location.href = "?PageSize=" + pageSize + "&PageNumber=1";
        }
    </script>
    <script>
        function updateButtonStyle(button, status) {
            // Remove previous status classes
            button.classList.remove('btn-primary', 'btn-warning', 'btn-success', 'btn-danger', 'btn-secondary');

            // Add new class based on status
            switch (status) {
                case "On Hold":
                    button.classList.add('btn-secondary'); // Gray for On Hold
                    break;
                case "Open House":
                    button.classList.add('btn-secondary'); // Gray for On Hold
                    break;
                case "Active":
                    button.classList.add('btn-success'); // Green for Active
                    break;
                case "Pending":
                    button.classList.add('btn-warning'); // Yellow for Pending
                    break;
                case "Closed":
                    button.classList.add('btn-danger'); // Red for Sold
                    break;
                case "Expired":
                    button.classList.add('btn-success'); // Green for Active
                    break;
                case "Withdrawn":
                    button.classList.add('btn-warning'); // Yellow for Pending
                    break;
                case "Cancelled":
                    button.classList.add('btn-danger'); // Red for Sold
                    break;
                default:
                    button.classList.add('btn-primary'); // Default color
            }
        }

        document.querySelectorAll('.btn-group').forEach(group => {
            const button = group.querySelector('.status-btn');

            // Set initial color based on current status
            updateButtonStyle(button, button.textContent.trim());

            group.querySelectorAll('.status-option').forEach(item => {
                item.addEventListener('click', function (e) {
                    e.preventDefault();

                    // Get the new status value
                    let newStatus = this.getAttribute('data-value');

                    // Update button text and style
                    button.textContent = newStatus;
                    updateButtonStyle(button, newStatus);
                });
            });
        });

    </script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            document.querySelectorAll(".status-option").forEach(item => {
                item.addEventListener("click", function (event) {
                    event.preventDefault();
                    let newStatus = this.getAttribute("data-value");
                    let listingId = this.getAttribute("data-listing-id");

                    // updates button text
                    this.closest(".btn-group").querySelector("button").innerText = newStatus;

                    // sends an AJAX request to update the status
                    fetch(`/Listings/UpdateStatus`, {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ listingId, newStatus })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            console.log("Status updated successfully");
                        } else {
                            console.error("Failed to update status:", data.message);
                        }
                    })
                    .catch(error => console.error("Error:", error));
                });
            });
        });
    </script>
}